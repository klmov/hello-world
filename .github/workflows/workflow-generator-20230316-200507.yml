name: sdfdsf
'on':
  push:
    branches:
    - dev
env:
  reference: ''
  project-path: ''
  AWS_REGION: ''
  ECS_SERVICE: ''
  ECS_TASK_DEFINITION: ''
  ECS_CLUSTER: ''
  CONTAINER_NAME: ''
jobs:
  Build-Cpp-Project:
    name: Build and Publish to Artifactory
    defaults:
      run:
        working-directory: ${{ github.workspace }}/${{ env.project-path }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Setup cmake
      uses: lukka/get-cmake@latest
    - name: Install Conan
      uses: turtlebrowser/get-conan@main
    - name: Configure connection to Artifactory server
      run: 'conan remote add artifactory ${{ secrets.artifactory-repo }}

        conan user -p ${{ secrets.artifactory-password }} -r artifactory ${{ secrets.artifactory-username
        }}

        '
    - name: Build and Publish to Artifactory
      run: "conan create . ${{ env.reference }} #  user/channel or pkg/version@user/channel\
        \ (if name and\n                                       #  version not declared\
        \ in conanfile.py) where the\n                                       #  package\
        \ will be created\nconan upload \"*\" -r artifactory --confirm --all"
    runs-on: external-k8s
  Scan-code-with-Sonar:
    steps:
    - name: Analyze with SonarCloud
      uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: -Dsonar.projectKey= -Dsonar.organization=
    runs-on: external-k8s
  Deploy-to-AWS-ECS:
    runs-on: external-k8s
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: '# Build a docker container and

        # push it to ECR so that it can

        # be deployed to ECS.

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        '
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
