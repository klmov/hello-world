name: dev
'on':
  push:
    branches:
    - dev
env:
  ECS_TASK_DEFINITION: ''
  ECS_SERVICE: ''
  CONTAINER_NAME: ''
  AWS_REGION: ''
  ECS_CLUSTER: ''
  role_to_assume: ''
  fargate_service: ''
  fargate_cluster: ''
  ECR_REPOSITORY: ''
  IMAGE_TAG: ''
  GKE_CLUSTER: ''
  GKE_ZONE: ''
jobs:
  Install-NodeJS-dependencies:
    strategy:
      matrix:
        node-version:
        - 14.x
        - 16.x
        - 18.x
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: npm
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    runs-on: external-k8s
  Publish-NPM-package:
    needs: build
    runs-on: external-k8s
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16
        registry-url: https://registry.npmjs.org/
    - run: npm ci
    - run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
  Scan-code-with-Sonar:
    steps:
    - name: Analyze with SonarCloud
      uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: -Dsonar.projectKey= -Dsonar.organization=
    runs-on: external-k8s
  Deploy-to-AWS-ECS:
    runs-on: external-k8s
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: '# Build a docker container and

        # push it to ECR so that it can

        # be deployed to ECS.

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        '
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
  Deploy-to-AWS-Fargate:
    permissions:
      id-token: write
      contents: read
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.role_to_assume }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Download task definition
      run: 'aws ecs describe-task-definition --task-definition fargate-node-task-defn
        --query taskDefinition > task-definition.json

        '
    - name: Build, tag, and push image to Amazon
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: 'docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        '
    - name: Fill in the new image ID in the AWS ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: nodejs-app-container
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy AWS ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.fargate_service }}
        cluster: ${{ env.fargate_cluster }}
        wait-for-service-stability: true
    runs-on: external-k8s
  Deploy-to-GKE:
    name: Setup, Build, Publish, and Deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
    - run: gcloud --quiet auth configure-docker
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - name: Build
      run: "docker build \\\n  --tag \"gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA\" \\\n\
        \  --build-arg GITHUB_SHA=\"$GITHUB_SHA\" \\\n  --build-arg GITHUB_REF=\"\
        $GITHUB_REF\" \\\n  ."
    - name: Publish
      run: docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
    - name: Set up Kustomize
      run: 'curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64

        chmod u+x ./kustomize'
    - name: Deploy
      run: './kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

        ./kustomize build . | kubectl apply -f -

        kubectl rollout status deployment/$DEPLOYMENT_NAME

        kubectl get services -o wide'
    runs-on: external-k8s
